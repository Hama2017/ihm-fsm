import { defineStore } from 'pinia';
import smartContractService from '@/services/smartContractService';
import { extractErrorCode } from '@/utils/errorFormatter';

/**
 * Store Pinia pour la gestion des contrats intelligents d√©ploy√©s.
 * Permet le d√©ploiement, l'ex√©cution et la gestion des contrats sur la blockchain.
 */
export const useSmartContractStore = defineStore('smartContract', {
  state: () => ({
    deployedContracts: [],
    currentDeployedContract: null,
    deploymentInfo: null,
    loading: false,
    error: null,
    executionResult: null,
    executionLoading: false
  }),

  getters: {
    /**
     * R√©cup√®re un contrat d√©ploy√© par son nom.
     * @returns {Function} Fonction de recherche de contrat d√©ploy√©
     */
    getDeployedContractByName: (state) => (name) => {
      return state.deployedContracts.find(contract => contract.name === name);
    },
    
    /**
     * Liste des noms de contrats d√©ploy√©s.
     * @returns {Array} Noms des contrats d√©ploy√©s
     */
    deployedContractNames: (state) => {
      return state.deployedContracts.map(contract => contract.name);
    },
    
    /**
     * Nombre total de contrats d√©ploy√©s.
     * @returns {Number} Nombre de contrats d√©ploy√©s
     */
    deployedContractCount: (state) => {
      return state.deployedContracts.length;
    }
  },

  actions: {
  /**
 * D√©ploie un contrat sur la blockchain.
 * @param {Object} specificationModel - Sp√©cification du contrat
 * @returns {Promise<Object>} R√©sultat du d√©ploiement
 */
async deployContract(specificationModel) {
    this.loading = true;
    this.error = null;
    this.deploymentInfo = null;
    
    try {
      console.log('D√©ploiement du contrat:', specificationModel.name);
      
      // ‚úÖ Le service retourne directement response.data (pas de wrapper success)
      const result = await smartContractService.deployContract(specificationModel);
      
      console.log('üîç R√©ponse brute du service:', result);
      
      // ‚úÖ CORRECTION: V√©rifier si la r√©ponse contient des donn√©es de d√©ploiement
      if (result && (result.automatons || result.name)) {
        // La r√©ponse contient les donn√©es du contrat d√©ploy√©
        this.deploymentInfo = result;
        
        // Ajouter le contrat √† la liste des contrats d√©ploy√©s
        const deployedContract = {
          name: specificationModel.name,
          deployedAt: result.deployed_at || new Date().toISOString(),
          automatons: result.automatons || result,
          status: 'deployed'
        };
        
        // V√©rifier si le contrat n'est pas d√©j√† dans la liste
        const existingIndex = this.deployedContracts.findIndex(c => c.name === specificationModel.name);
        if (existingIndex !== -1) {
          this.deployedContracts[existingIndex] = deployedContract;
        } else {
          this.deployedContracts.push(deployedContract);
        }
        
        this.currentDeployedContract = deployedContract;
        
        return {
          success: true,
          data: result
        };
      } else {
        // Pas de donn√©es de d√©ploiement trouv√©es
        this.error = 'R√©ponse invalide du serveur';
        return {
          success: false,
          error: 'R√©ponse invalide du serveur'
        };
      }
      
    } catch (error) {
      console.error('Erreur lors du d√©ploiement:', error);
      
      // ‚úÖ V√©rifier si l'erreur contient en fait des donn√©es de succ√®s (status 201)
      if (error.response && error.response.status === 201 && error.response.data) {
        console.log('‚úÖ D√©ploiement r√©ussi malgr√© l\'erreur (status 201)');
        
        const result = error.response.data;
        this.deploymentInfo = result;
        
        const deployedContract = {
          name: specificationModel.name,
          deployedAt: result.deployed_at || new Date().toISOString(),
          automatons: result.automatons || result,
          status: 'deployed'
        };
        
        const existingIndex = this.deployedContracts.findIndex(c => c.name === specificationModel.name);
        if (existingIndex !== -1) {
          this.deployedContracts[existingIndex] = deployedContract;
        } else {
          this.deployedContracts.push(deployedContract);
        }
        
        this.currentDeployedContract = deployedContract;
        
        return {
          success: true,
          data: result
        };
      }
      
      // Vraie erreur
      const errorCode = extractErrorCode(error, 'deployment_failed', 'contract');
      this.error = errorCode;
      
      return {
        success: false,
        error: error.response?.data?.detail?.message || 
               error.response?.data?.message ||
               error.message || 
               'Erreur lors du d√©ploiement',
        errorCode
      };
    } finally {
      this.loading = false;
    }
  },

    /**
     * R√©cup√®re les informations d'un contrat d√©ploy√©.
     * @param {string} contractName - Nom du contrat
     * @returns {Promise<Object>} Informations du contrat
     */
    async fetchDeployedContractInfo(contractName) {
        this.loading = true;
        this.error = null;
      
        try {
          const result = await smartContractService.getDeployedContractInfo(contractName);
      
          if (result && result.automatons) {
            const contractInfo = {
              name: contractName,
              automatons: result.automatons,
              deployedAt: result.deployed_at || new Date().toISOString(),
              status: 'deployed'
            };
      
            this.currentDeployedContract = contractInfo;
      
            // Mise √† jour de la liste des contrats d√©ploy√©s
            const existingIndex = this.deployedContracts.findIndex(c => c.name === contractName);
            if (existingIndex !== -1) {
              this.deployedContracts[existingIndex] = contractInfo;
            } else {
              this.deployedContracts.push(contractInfo);
            }
      
            return {
              success: true,
              data: result // Renvoie directement result
            };
          }
      
          // Si automatons n‚Äôest pas trouv√© dans la r√©ponse
          throw new Error('Donn√©es invalides re√ßues du serveur.');
        } catch (error) {
          const errorMessage =
            error.response?.data?.message || error.message || 'Erreur r√©seau lors de la r√©cup√©ration des informations.';
          this.error = errorMessage;
      
          return {
            success: false,
            error: errorMessage
          };
        } finally {
          this.loading = false;
        }
      },
      

    /**
     * R√©cup√®re tous les contrats d√©ploy√©s.
     * @returns {Promise<Object>} Liste des contrats d√©ploy√©s
     */
    async fetchAllDeployedContracts() {
      this.loading = true;
      this.error = null;
      
      try {
        console.log('R√©cup√©ration de tous les contrats d√©ploy√©s...');
        
        const result = await smartContractService.getAllDeployedContracts();
        
        if (result.success) {
          // Formater la liste des contrats d√©ploy√©s
          const deployedContracts = [];
          
          if (Array.isArray(result.data)) {
            deployedContracts.push(...result.data.map(contract => ({
              name: contract.name,
              automatons: contract.automatons || {},
              deployedAt: contract.deployedAt || new Date().toISOString(),
              status: 'deployed'
            })));
          } else if (typeof result.data === 'object') {
            // Si la r√©ponse est un objet avec des propri√©t√©s
            for (const [contractName, contractData] of Object.entries(result.data)) {
              deployedContracts.push({
                name: contractName,
                automatons: contractData.automatons || contractData,
                deployedAt: contractData.deployedAt || new Date().toISOString(),
                status: 'deployed'
              });
            }
          }
          
          this.deployedContracts = deployedContracts;
          
          return {
            success: true,
            data: deployedContracts
          };
        } else {
          this.error = result.error;
          return {
            success: false,
            error: result.error
          };
        }
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des contrats d√©ploy√©s:', error);
        const errorCode = extractErrorCode(error, 'fetch_failed', 'contract');
        this.error = errorCode;
        
        return {
          success: false,
          errorCode
        };
      } finally {
        this.loading = false;
      }
    },

    /**
     * Ex√©cute une fonction sur un contrat d√©ploy√©.
     * @param {string} contractName - Nom du contrat
     * @param {string} clauseName - Nom de la clause
     * @param {string} functionName - Nom de la fonction
     * @param {Array} args - Arguments de la fonction
     * @returns {Promise<Object>} R√©sultat de l'ex√©cution
     */
    async executeContractFunction(contractName, clauseName, functionName, args = []) {
        this.executionLoading = true;
        this.error = null;
        this.executionResult = null;
      
        try {
          console.log('Ex√©cution de la fonction:', { contractName, clauseName, functionName, args });
      
          // Appel au service
          const result = await smartContractService.executeContractFunction(
            contractName,
            clauseName,
            functionName,
            args
          );
      
          // ‚úÖ V√©rification du champ "result" dans la r√©ponse
          if (result && result.result !== undefined) {
            this.executionResult = result;
      
            return {
              success: true,
              data: result
            };
          } else {
            const message = result?.error || 'R√©sultat inattendu du backend';
            this.error = message;
      
            return {
              success: false,
              error: message
            };
          }
      
        } catch (error) {
          console.error('Erreur lors de l\'ex√©cution:', error);
          const message =
            error.response?.data?.detail?.message ||
            error.response?.data?.message ||
            error.message || 'Erreur inconnue lors de l\'ex√©cution';
      
          this.error = message;
      
          return {
            success: false,
            error: message
          };
        } finally {
          this.executionLoading = false;
        }
      },
      

    /**
     * Supprime un contrat d√©ploy√©.
     * @param {string} contractName - Nom du contrat
     * @returns {Promise<Object>} R√©sultat de la suppression
     */
    async deleteDeployedContract(contractName) {
      this.loading = true;
      this.error = null;
      
      try {
        console.log('Suppression du contrat d√©ploy√©:', contractName);
        
        const result = await smartContractService.deleteDeployedContract(contractName);
        
        if (result.success) {
          // Supprimer de la liste
          this.deployedContracts = this.deployedContracts.filter(c => c.name !== contractName);
          
          // R√©initialiser le contrat courant si c'est celui supprim√©
          if (this.currentDeployedContract && this.currentDeployedContract.name === contractName) {
            this.currentDeployedContract = null;
          }
          
          return {
            success: true
          };
        } else {
          this.error = result.error;
          return {
            success: false,
            error: result.error
          };
        }
      } catch (error) {
        console.error('Erreur lors de la suppression:', error);
        const errorCode = extractErrorCode(error, 'deletion_failed', 'contract');
        this.error = errorCode;
        
        return {
          success: false,
          errorCode
        };
      } finally {
        this.loading = false;
      }
    },

    /**
     * D√©finit le contrat d√©ploy√© actuellement s√©lectionn√©.
     * @param {Object|string} contractOrName - Contrat ou nom du contrat
     */
    setCurrentDeployedContract(contractOrName) {
      if (typeof contractOrName === 'string') {
        this.currentDeployedContract = this.getDeployedContractByName(contractOrName);
      } else {
        this.currentDeployedContract = contractOrName;
      }
    },

    /**
     * R√©initialise le contrat d√©ploy√© actuellement s√©lectionn√©.
     */
    clearCurrentDeployedContract() {
      this.currentDeployedContract = null;
    },

    /**
     * R√©initialise les r√©sultats d'ex√©cution.
     */
    clearExecutionResult() {
      this.executionResult = null;
    },

    /**
     * R√©initialise les informations de d√©ploiement.
     */
    clearDeploymentInfo() {
      this.deploymentInfo = null;
    }
  }
});