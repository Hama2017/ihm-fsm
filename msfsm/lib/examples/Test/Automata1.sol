pragma solidity ^0.8.29;contract Automata1 {enum State {Q0,Q1,Q2,Q3,COMPLETED}State currentState = State.Q0;function automata__Automata3__is_completed() public returns (bool) {(bool success, bytes memory data) = address(0xfbC22278A96299D91d41C453234d97b4F5Eb9B2d).delegatecall(abi.encodeWithSignature("is_completed()"));require(success, 'Call failed');return abi.decode(data, (bool));}function automata__Automata0__is_completed() public returns (bool) {(bool success, bytes memory data) = address(0xD84379CEae14AA33C123Af12424A37803F885889).delegatecall(abi.encodeWithSignature("is_completed()"));require(success, 'Call failed');return abi.decode(data, (bool));}function automata__Automata2__is_completed() public returns (bool) {(bool success, bytes memory data) = address(0x2B0d36FACD61B71CC05ab8F3D2355ec3631C0dd5).delegatecall(abi.encodeWithSignature("is_completed()"));require(success, 'Call failed');return abi.decode(data, (bool));}function package__p1__c2() public pure returns (bool) { return true; }function package__p1__c1() public pure returns (bool) { return true; }function c() public {require(currentState == State.Q2);if (currentState == State.Q2) {currentState = State.COMPLETED;if (!automata__Automata3__is_completed()) {revert('External call failed');}}}function a() public {require(currentState == State.Q0);if (currentState == State.Q0) {currentState = State.Q1;if (!automata__Automata0__is_completed()) {revert('External call failed');}}}function b() public {require(currentState == State.Q1);if (currentState == State.Q1) {currentState = State.Q2;if (!automata__Automata2__is_completed()) {revert('External call failed');}}}function d() public {require(currentState == State.Q1);if (package__p1__c1() && package__p1__c2() && currentState == State.Q1) {currentState = State.Q3;}}function e() public {require(currentState == State.Q3);if (package__p1__c2() && currentState == State.Q3) {currentState = State.COMPLETED;}}function get_current_state() public view returns (uint) { return uint(currentState); }function is_completed() public view returns (bool) { return currentState == State.COMPLETED; }function to_completed() public { currentState = State.COMPLETED; }}